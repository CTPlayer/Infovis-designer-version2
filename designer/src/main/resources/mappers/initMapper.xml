<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jiudaotech.www">

    <update id="initSystemCoreTables" databaseId="h2">
      CREATE TABLE IF NOT EXISTS T_SYS_CORE_METADATA (
        ID BIGINT AUTO_INCREMENT,
        VERSION REAL,
        UPDATE_TIME VARCHAR(14)
      );
      INSERT INTO T_SYS_CORE_METADATA(VERSION, UPDATE_TIME) VALUES (1.0, TO_CHAR(CURRENT_TIMESTAMP(), 'yyyyMMddHHmmss'));

      <!--数据库连接表-->
      CREATE TABLE IF NOT EXISTS T_DB_CONNECTION
      (
        ID BIGINT AUTO_INCREMENT NOT NULL,
        DBTYPE VARCHAR(10) NOT NULL,
        DBNAME VARCHAR(300) NOT NULL,
        DBHOST VARCHAR(300) NOT NULL,
        DBPORT VARCHAR(300) NOT NULL,
        DBURL VARCHAR(300) NOT NULL,
        USERNAME VARCHAR(300) NOT NULL,
        PASSWORD VARCHAR(300) NOT NULL,
        CREATETIME VARCHAR(14) NOT NULL
      );
      COMMENT ON COLUMN T_DB_CONNECTION.ID IS '自增主键';
      COMMENT ON COLUMN T_DB_CONNECTION.DBTYPE IS '数据库类型';
      COMMENT ON COLUMN T_DB_CONNECTION.DBNAME IS '数据库名称';
      COMMENT ON COLUMN T_DB_CONNECTION.DBHOST IS '数据库主机名';
      COMMENT ON COLUMN T_DB_CONNECTION.DBPORT IS '数据库端口';
      COMMENT ON COLUMN T_DB_CONNECTION.DBURL IS '数据库连接字符串';
      COMMENT ON COLUMN T_DB_CONNECTION.USERNAME IS '用户名';
      COMMENT ON COLUMN T_DB_CONNECTION.PASSWORD IS '密码';
      COMMENT ON COLUMN T_DB_CONNECTION.CREATETIME IS '创建时间';

      <!--sql记录保存表-->
      CREATE TABLE IF NOT EXISTS T_DB_SQLRECORDING(
        id BIGINT AUTO_INCREMENT NOT NULL COMMENT '主键',
        RECORDING_NAME VARCHAR(50) NOT NULL COMMENT '记录名称',
        SQL_RECORDING CLOB NOT NULL COMMENT 'sql内容',
        CONNECTION_ID BIGINT NOT NULL COMMENT '连接ID',
        CREATE_TIME VARCHAR(14) NOT NULL COMMENT '创建日期',
        CREATE_PEOPLE VARCHAR(50) COMMENT '创建人'
      );

      <!--设计面板保存表-->
      CREATE TABLE IF NOT EXISTS T_MY_PANEL(
        id BIGINT AUTO_INCREMENT NOT NULL COMMENT '主键',
        PANEL_NAME VARCHAR(50) NOT NULL COMMENT '面板名称',
        PANEL_REMARK VARCHAR(2000) DEFAULT NULL COMMENT '面板备注',
        CREATE_TIME VARCHAR(14) NOT NULL COMMENT '创建日期',
        UPDATE_TIME VARCHAR(14) DEFAULT NULL COMMENT '更新日期',
        HTML_CODE CLOB DEFAULT NULL COMMENT 'html代码',
        JS_CODE CLOB DEFAULT NULL COMMENT 'JS代码',
        IMG CLOB DEFAULT NULL COMMENT '图片',
        EXPORT_ID VARCHAR(36) DEFAULT NULL COMMENT '外部标识UUID',
        BACKGROUND_CLASS VARCHAR(50) DEFAULT NULL COMMENT '背景class'
      );

      <!--我的图表保存表-->
      CREATE TABLE IF NOT EXISTS T_MY_CHARTS(
        id BIGINT AUTO_INCREMENT NOT NULL COMMENT '主键',
        SQLRECORDING_ID BIGINT NOT NULL COMMENT '连接ID',
        BUILD_MODEL CLOB NOT NULL COMMENT '数据模型',
        CHART_TYPE VARCHAR(50) NOT NULL COMMENT '图表类型',
        JS_CODE CLOB NOT NULL COMMENT '图表配置',
        CHART_NAME VARCHAR(50) NOT NULL COMMENT '：',
        IS_REAL_TIME VARCHAR(10) DEFAULT NULL COMMENT '是否实时获取图表配置'
      );

      <!--设计面板，图表中间表-->
      CREATE TABLE IF NOT EXISTS T_PANEL_CHARTS(
        ID BIGINT AUTO_INCREMENT NOT NULL COMMENT ' 主键',
        EXPORT_ID VARCHAR(36) NOT NULL COMMENT '设计面板唯一标识',
        CHART_ID BIGINT NOT NULL COMMENT '图表标识',
        ORDER_ID BIGINT NOT NULL COMMENT '相同设计面板中的容器标识'
      );

      <!--quartz相关表-->
      CREATE TABLE QRTZ_CALENDARS (
      SCHED_NAME VARCHAR(120) NOT NULL,
      CALENDAR_NAME VARCHAR (200)  NOT NULL ,
      CALENDAR IMAGE NOT NULL
      );

      CREATE TABLE QRTZ_CRON_TRIGGERS (
      SCHED_NAME VARCHAR(120) NOT NULL,
      TRIGGER_NAME VARCHAR (200)  NOT NULL ,
      TRIGGER_GROUP VARCHAR (200)  NOT NULL ,
      CRON_EXPRESSION VARCHAR (120)  NOT NULL ,
      TIME_ZONE_ID VARCHAR (80)
      );

      CREATE TABLE QRTZ_FIRED_TRIGGERS (
      SCHED_NAME VARCHAR(120) NOT NULL,
      ENTRY_ID VARCHAR (95)  NOT NULL ,
      TRIGGER_NAME VARCHAR (200)  NOT NULL ,
      TRIGGER_GROUP VARCHAR (200)  NOT NULL ,
      INSTANCE_NAME VARCHAR (200)  NOT NULL ,
      FIRED_TIME BIGINT NOT NULL ,
      SCHED_TIME BIGINT NOT NULL ,
      PRIORITY INTEGER NOT NULL ,
      STATE VARCHAR (16)  NOT NULL,
      JOB_NAME VARCHAR (200)  NULL ,
      JOB_GROUP VARCHAR (200)  NULL ,
      IS_NONCONCURRENT BOOLEAN  NULL ,
      REQUESTS_RECOVERY BOOLEAN  NULL
      );

      CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS (
      SCHED_NAME VARCHAR(120) NOT NULL,
      TRIGGER_GROUP VARCHAR (200)  NOT NULL
      );

      CREATE TABLE QRTZ_SCHEDULER_STATE (
      SCHED_NAME VARCHAR(120) NOT NULL,
      INSTANCE_NAME VARCHAR (200)  NOT NULL ,
      LAST_CHECKIN_TIME BIGINT NOT NULL ,
      CHECKIN_INTERVAL BIGINT NOT NULL
      );

      CREATE TABLE QRTZ_LOCKS (
      SCHED_NAME VARCHAR(120) NOT NULL,
      LOCK_NAME VARCHAR (40)  NOT NULL
      );

      CREATE TABLE QRTZ_JOB_DETAILS (
      SCHED_NAME VARCHAR(120) NOT NULL,
      JOB_NAME VARCHAR (200)  NOT NULL ,
      JOB_GROUP VARCHAR (200)  NOT NULL ,
      DESCRIPTION VARCHAR (250) NULL ,
      JOB_CLASS_NAME VARCHAR (250)  NOT NULL ,
      IS_DURABLE BOOLEAN  NOT NULL ,
      IS_NONCONCURRENT BOOLEAN  NOT NULL ,
      IS_UPDATE_DATA BOOLEAN  NOT NULL ,
      REQUESTS_RECOVERY BOOLEAN  NOT NULL ,
      JOB_DATA IMAGE NULL
      );

      CREATE TABLE QRTZ_SIMPLE_TRIGGERS (
      SCHED_NAME VARCHAR(120) NOT NULL,
      TRIGGER_NAME VARCHAR (200)  NOT NULL ,
      TRIGGER_GROUP VARCHAR (200)  NOT NULL ,
      REPEAT_COUNT BIGINT NOT NULL ,
      REPEAT_INTERVAL BIGINT NOT NULL ,
      TIMES_TRIGGERED BIGINT NOT NULL
      );

      CREATE TABLE qrtz_simprop_triggers
      (
      SCHED_NAME VARCHAR(120) NOT NULL,
      TRIGGER_NAME VARCHAR(200) NOT NULL,
      TRIGGER_GROUP VARCHAR(200) NOT NULL,
      STR_PROP_1 VARCHAR(512) NULL,
      STR_PROP_2 VARCHAR(512) NULL,
      STR_PROP_3 VARCHAR(512) NULL,
      INT_PROP_1 INTEGER NULL,
      INT_PROP_2 INTEGER NULL,
      LONG_PROP_1 BIGINT NULL,
      LONG_PROP_2 BIGINT NULL,
      DEC_PROP_1 NUMERIC(13,4) NULL,
      DEC_PROP_2 NUMERIC(13,4) NULL,
      BOOL_PROP_1 BOOLEAN NULL,
      BOOL_PROP_2 BOOLEAN NULL,
      );

      CREATE TABLE QRTZ_BLOB_TRIGGERS (
      SCHED_NAME VARCHAR(120) NOT NULL,
      TRIGGER_NAME VARCHAR (200)  NOT NULL ,
      TRIGGER_GROUP VARCHAR (200)  NOT NULL ,
      BLOB_DATA IMAGE NULL
      );

      CREATE TABLE QRTZ_TRIGGERS (
      SCHED_NAME VARCHAR(120) NOT NULL,
      TRIGGER_NAME VARCHAR (200)  NOT NULL ,
      TRIGGER_GROUP VARCHAR (200)  NOT NULL ,
      JOB_NAME VARCHAR (200)  NOT NULL ,
      JOB_GROUP VARCHAR (200)  NOT NULL ,
      DESCRIPTION VARCHAR (250) NULL ,
      NEXT_FIRE_TIME BIGINT NULL ,
      PREV_FIRE_TIME BIGINT NULL ,
      PRIORITY INTEGER NULL ,
      TRIGGER_STATE VARCHAR (16)  NOT NULL ,
      TRIGGER_TYPE VARCHAR (8)  NOT NULL ,
      START_TIME BIGINT NOT NULL ,
      END_TIME BIGINT NULL ,
      CALENDAR_NAME VARCHAR (200)  NULL ,
      MISFIRE_INSTR SMALLINT NULL ,
      JOB_DATA IMAGE NULL
      );

      ALTER TABLE QRTZ_CALENDARS  ADD
      CONSTRAINT PK_QRTZ_CALENDARS PRIMARY KEY
      (
      SCHED_NAME,
      CALENDAR_NAME
      );

      ALTER TABLE QRTZ_CRON_TRIGGERS  ADD
      CONSTRAINT PK_QRTZ_CRON_TRIGGERS PRIMARY KEY
      (
      SCHED_NAME,
      TRIGGER_NAME,
      TRIGGER_GROUP
      );

      ALTER TABLE QRTZ_FIRED_TRIGGERS  ADD
      CONSTRAINT PK_QRTZ_FIRED_TRIGGERS PRIMARY KEY
      (
      SCHED_NAME,
      ENTRY_ID
      );

      ALTER TABLE QRTZ_PAUSED_TRIGGER_GRPS  ADD
      CONSTRAINT PK_QRTZ_PAUSED_TRIGGER_GRPS PRIMARY KEY
      (
      SCHED_NAME,
      TRIGGER_GROUP
      );

      ALTER TABLE QRTZ_SCHEDULER_STATE  ADD
      CONSTRAINT PK_QRTZ_SCHEDULER_STATE PRIMARY KEY
      (
      SCHED_NAME,
      INSTANCE_NAME
      );

      ALTER TABLE QRTZ_LOCKS  ADD
      CONSTRAINT PK_QRTZ_LOCKS PRIMARY KEY
      (
      SCHED_NAME,
      LOCK_NAME
      );

      ALTER TABLE QRTZ_JOB_DETAILS  ADD
      CONSTRAINT PK_QRTZ_JOB_DETAILS PRIMARY KEY
      (
      SCHED_NAME,
      JOB_NAME,
      JOB_GROUP
      );

      ALTER TABLE QRTZ_SIMPLE_TRIGGERS  ADD
      CONSTRAINT PK_QRTZ_SIMPLE_TRIGGERS PRIMARY KEY
      (
      SCHED_NAME,
      TRIGGER_NAME,
      TRIGGER_GROUP
      );

      ALTER TABLE QRTZ_SIMPROP_TRIGGERS  ADD
      CONSTRAINT PK_QRTZ_SIMPROP_TRIGGERS PRIMARY KEY
      (
      SCHED_NAME,
      TRIGGER_NAME,
      TRIGGER_GROUP
      );

      ALTER TABLE QRTZ_TRIGGERS  ADD
      CONSTRAINT PK_QRTZ_TRIGGERS PRIMARY KEY
      (
      SCHED_NAME,
      TRIGGER_NAME,
      TRIGGER_GROUP
      );

      ALTER TABLE QRTZ_CRON_TRIGGERS ADD
      CONSTRAINT FK_QRTZ_CRON_TRIGGERS_QRTZ_TRIGGERS FOREIGN KEY
      (
      SCHED_NAME,
      TRIGGER_NAME,
      TRIGGER_GROUP
      ) REFERENCES QRTZ_TRIGGERS (
      SCHED_NAME,
      TRIGGER_NAME,
      TRIGGER_GROUP
      ) ON DELETE CASCADE;


      ALTER TABLE QRTZ_SIMPLE_TRIGGERS ADD
      CONSTRAINT FK_QRTZ_SIMPLE_TRIGGERS_QRTZ_TRIGGERS FOREIGN KEY
      (
      SCHED_NAME,
      TRIGGER_NAME,
      TRIGGER_GROUP
      ) REFERENCES QRTZ_TRIGGERS (
      SCHED_NAME,
      TRIGGER_NAME,
      TRIGGER_GROUP
      ) ON DELETE CASCADE;

      ALTER TABLE QRTZ_SIMPROP_TRIGGERS ADD
      CONSTRAINT FK_QRTZ_SIMPROP_TRIGGERS_QRTZ_TRIGGERS FOREIGN KEY
      (
      SCHED_NAME,
      TRIGGER_NAME,
      TRIGGER_GROUP
      ) REFERENCES QRTZ_TRIGGERS (
      SCHED_NAME,
      TRIGGER_NAME,
      TRIGGER_GROUP
      ) ON DELETE CASCADE;


      ALTER TABLE QRTZ_TRIGGERS ADD
      CONSTRAINT FK_QRTZ_TRIGGERS_QRTZ_JOB_DETAILS FOREIGN KEY
      (
      SCHED_NAME,
      JOB_NAME,
      JOB_GROUP
      ) REFERENCES QRTZ_JOB_DETAILS (
      SCHED_NAME,
      JOB_NAME,
      JOB_GROUP
      );
    </update>
</mapper>